---
layout: post
title: "Front end stuff - HTML, CSS, JavaScript and jQuery" 
tags: [HTML, CSS, jQuery, JavaScript]
---

When I started my job I had no CSS or JavaScript or jQuery to speak of. The first time I had to modify a page was when I realised that I had no foundation from which to learn CSS by example.  Here are some of the resources that I found very helpful in my journey to attaining enough knowledge and skills to confidently assert that I am now a novice! In the second half of this post I present an example - constructing an "Add" button to a form to allow the user to add more rows of input fields.

h3. References

If you are an absolute beginner, I suggest starting with the following goals:
# *Understand the _box model._*  This is at the heart of CSS. All elements of a web page are boxes that have standard properties like height, width, border, padding and margin. Use "Firebug":http://getfirebug.com/ to inspect anything on a webpage and use the "Layout":https://skitch.com/navink/ryudr/the-ink-blot-nks-ramblings#lightbox tab to view its box model representation. Incidentally, you can click into the layout view, change values and see the effect that this has on the element you are inspecting. Similarly, you can click into and edit anything you see in the Styles tab - a great way to experiment with what various CSS properties do.  
There are so many tricks to the trade that you only really pick up with experience and I've got a ways to go before I am using CSS properties effectively - O'Reilly's "CSS cookbook":http://oreilly.com/catalog/9780596005764 and "The Art and Science of CSS":http://www.sitepoint.com/books/cssdesign1/ come in handy when I run into a CSS property or a pattern that I need to look up.
# *Get your head around _IDs_ and _classes._*  Simply put, IDs are unique while classes are not. Meanhwile, they are both _hooks._ See this "article":http://css-tricks.com/the-difference-between-id-and-class/ by Chris Coyier for more.
# *Understand how HTML documents are structured.* For HTML 4 see this "reference":http://www.w3.org/TR/html401/struct/global.html by the W3C and "html-5.com":http://html-5.com looks like a good place to pick up resources for HTML 5. As I write this I realise that I am quite green on this particular topic - and the reason I know this is because I don't know enough about the intention behind each structural element.  However, and at the risk of sharp intakes of breath from those who can spell "semantic"(!), I will admit that I am no longer using @<p>@ and @<br>@ to create a list (use @<ul>@ and @<li>@ instead!).
# *JavaScript - learn the basics.* "Amy Hoy":http://slash7.com/ and "Thomas Fuchs":http://en.wikipedia.org/wiki/Thomas_Fuchs run a masterclass on the topic and so I asked them to suggest a book for the beginner.  Amy suggested "Eloquent Javascript":http://eloquentjavascript.net/ by Marijn Haverbeke - it's free, well written, and really very accessible. It even works as an introduction to programming.

At work we tend to use "jQuery":http://jquery.com a lot.  The documentation on "jQuery.com":http://jquery.com is terrific but here are a few other references that I have found very useful - "jQuery Fundamentals":http://jqfundamentals.com/book/book.html by Rebecca Murphey and "jQuery: Novice to Ninja":http://www.sitepoint.com/books/jquery1/ by Craig Sharkie and Earle Castledine.  When starting out with jQuery, I suggest spending time getting to understand _selectors._ This is the hard part and gets clouded by the temptation to go shopping for jQuery actions immediately. 

h3. jQuery example - dynamically adding fields to a form

Here is an example of jQuery at work in a Rails app - something I learned from my colleague, Brad Wilson.  We needed to create a form to collect names and email addresses and, wanted to make the form start out with a single row of input fields, giving the user the option to add more names and email addresses if they so wished (this was part of a referral process).  Here's what we came up with (if anyone out there has a better solution, please tell me about it through a comment or via email).  

The partial for the three input fields looked like (this is in haml and uses the Rails form helper @fields_for@):
<script src="https://gist.github.com/775972.js"> </script>

And the partial setting up the form along with a *hidden row* like so:
<script src="https://gist.github.com/776001.js"> </script>

The resulting form (without the submit button) looks like this:

<img src="http://img.skitch.com/20110115-mm1b6g672a63e2cb7qfhtm5rt3.jpg" alt="Tell a Friend | ABC Reading Eggs" class="img" />

Finally, the jQuery that responds to a click on the "Add another" link:
<script src="https://gist.github.com/776005.js"> </script>

Clicking on "Add another" results in another row of input fields being added to the form as shown in the image below:

<img src="http://img.skitch.com/20110115-jacst77s1rduxx1hemxgk1xuwf.jpg" alt="Tell a Friend | ABC Reading Eggs" class="img" />

So here is what is happening:
# The form hides the simple three field @_invitee_form@ in a div with class @user_details_base@.  It also shows the first three field row in a div with id @user_details@.
# The jQuery in @form.js@ is invoked on clicking the link with id @add_user@ (i.e. the link "Add another"). It selects the class @user_details_base@, clones it, appends it to the div with id @user_details@ (i.e. to the visible part of the form).  Finally, it invokes the action @show()@, thereby ensuring that the newly appended row is displayed.
# What's the @return false();@ about?  Well, this prevents the browser from jumping back to the link anchor.

Hope this post has proved valuable - enjoy the wondrous world of HTML, CSS and JavaScript!
