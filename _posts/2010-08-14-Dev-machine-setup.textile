---
layout: post
title: "Notes on setting up a Rails development machine" 
categories: [Rails, OSX, Tools]
---

I got a job! I'm a Rails developer at Blake Education, a publishing company that specialises in textbooks, study aids and other material relevant to the education sector. We develop and maintain "readingeggs.com":http://readingeggs.com - a Rails powered site that is cobranded with ABC Online. Its goal is to help children learn to read. I'm delighted to have discovered an opportunity for simultaneously feeding my passions for technology and education!

I've worked for high profile consulting firms and obscenely profitable banks but never have I had an employer give me such high quality kit - I was given a 24'' display and a brand new MacBook Pro and spent the first day setting it up. Yay! Well, I learned a few things along the way that I will document here.  Hopefully the tools mentioned here will be of benefit to other newbies looking for tips on setting up their (Rails) development machines/environments.  Seasoned Ruby/Rails/dev types, please comment if you have suggestions for improvements! And yes, some of this is OS X specific.

# *XCode:* Unless you get into ObjectiveC or MacRuby, you are unlikely to need the IDE but package managers for OS X depend on it.  It's on the DVD that came with your Mac but you may be better off just "downloading":http://developer.apple.com/technologies/tools/xcode.html the latest version from Apple. 
# *Babushka:* Described by its author, "Ben Hoskings,":http://twitter.com/ben_h as _test-driven sysadmin,_ babushka is a great way to reliably negotiate the hitherto complex and messy installations of things like MySQL and ImageMagick. A great many useful _deps_ (think recipes) have been written in babushka's DSL and I was advised by my new coworkers to use them liberally! See Ben's "post":http://benhoskin.gs/2010/08/01/getting-started-with-babushka/ on how to get started. Oh, babushka works on OS X and Ubuntu as well.
# *Homebrew*  "homebrew":http://mxcl.github.com/homebrew/ is simply an awesome package manager for OS X.  I've tried MacPorts and, well, I think Homebrew is just much more usable! I'm not the only one either - see this "post":http://www.engineyard.com/blog/2010/homebrew-os-xs-missing-package-manager/ for more.  Use babushka to get homebrew with @babushka homebrew@ (the dep will check for XCode and this is why it's up there on this list).
The awesomeness of homebrew is demonstrated by the ease with which you can use it to install MySQL. @brew install mysql@ will do all of the "calisthenics":http://hivelogic.com/articles/compiling-mysql-on-snow-leopard involved! Installing the @mysql@ gem requires some platform specific flags to be set - thanks to @defunkt's "tip":http://ozmm.org/posts/homebrew___mysql___snow_leopard.html something like this should work on Snow Leopard:
{% highlight ruby %}
sudo env ARCHFLAGS="-arch x86_64" gem install mysql -- --with-mysql-config=/usr/local/mysql/bin/mysql_config  
{% endhighlight %}
# *rvm* Wayne E. Seguin's "Ruby Version Manager,":http://beginrescueend.com @rvm@ is amongst the best things to happen to Ruby in 2010 - he  won a very well deserved Ruby Hero award for @rvm@ at RailsConf 2010. @rvm@ is similar to Python's @virtualenv@ in that it allows you to set up separate environments for your Ruby projects, thereby enabling multiple versions of Ruby, Rails, and other gems to conveniently coexist on the same machine. You can associate _gemsets_ to separate projects, and specify which version of Ruby and which gems belong to a gemset. Apart from the "official documentation":http://beginrescueend.com there are some excellent posts out there on getting started with @rvm.@ See ==@==ascarter's "post":http://ascarter.net/2010/05/30/ruby-version-manager.html and also check out Michael Hartl's updated "Rails Tutorial":http://railstutorial.org for Rails 3 - it now includes the setup of a gemset for a Rails 3 environment in the first chapter.  If you are working with a project that uses "Bundler,":http://gembundler.com check out Mikel Lindsaar's excellent article, "Bundle me some sanity":http://lindsaar.net/2010/3/31/bundle_me_some_sanity for a quick overview of the magic that happens when @rvm@ and Bundler get together.  I was setting up a project that did not have a Bundler Gemfile associated with it so resorted instead to having one of my new colleagues export their @rvm@ gemset (associated to the project) and then using @rvm gemset import@ to simply set up all the gems I needed for my environment.  

